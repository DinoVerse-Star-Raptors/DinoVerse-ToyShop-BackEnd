Creating a well-organized file structure is crucial for maintaining a clean and scalable Node.js application. Here's an example of a file structure that separates the API versions `v1` and `v2`:

```
/my-app
├── /node_modules
├── /src
│   ├── /api
│   │   ├── /v1
│   │   │   ├── /controllers
│   │   │   │   └── exampleController.js
│   │   │   ├── /routes
│   │   │   │   └── exampleRoute.js
│   │   │   ├── /models
│   │   │   │   └── exampleModel.js
│   │   │   ├── index.js
│   │   │   └── utils.js
│   │   ├── /v2
│   │   │   ├── /controllers
│   │   │   │   └── exampleController.js
│   │   │   ├── /routes
│   │   │   │   └── exampleRoute.js
│   │   │   ├── /models
│   │   │   │   └── exampleModel.js
│   │   │   ├── index.js
│   │   │   └── utils.js
│   ├── /config
│   │   └── config.js
│   ├── /middleware
│   │   └── authMiddleware.js
│   ├── /services
│   │   └── exampleService.js
│   ├── /utils
│   │   └── helper.js
│   ├── app.js
│   └── server.js
├── .gitignore
├── package.json
└── README.md
```

### Key Points:
- **`/api/v1` and `/api/v2`:** Separate folders for each version of your API.
- **`/controllers`, `/routes`, `/models`:** MVC architecture for better separation of concerns.
- **`/config`:** Configuration files.
- **`/middleware`:** Middleware files.
- **`/services`:** Business logic services.
- **`/utils`:** Utility functions and helpers.
- **`app.js` and `server.js`:** Entry point and server setup.

This structure helps keep your code organized, making it easier to manage and scale as your application grows. If you have any specific requirements or further details to include, let me know!

Certainly! Here is an example of a `vercel.json` configuration file for deploying your Node.js application on Vercel:

```json
{
  "version": 2,
  "builds": [
    {
      "src": "server.js",
      "use": "@vercel/node"
    }
  ],
  "routes": [
    {
      "src": "/api/v1/(.*)",
      "dest": "/src/api/v1/index.js"
    },
    {
      "src": "/api/v2/(.*)",
      "dest": "/src/api/v2/index.js"
    }
  ],
  "env": {
    "NODE_ENV": "production",
    "PORT": "3000"
  }
}
```

### Explanation:
- **`version`**: Defines the version of the Vercel configuration.
- **`builds`**: Specifies the entry point for your application (`server.js`) and uses the `@vercel/node` builder.
- **`routes`**: Maps the `/api/v1` and `/api/v2` endpoints to their respective entry points in your application.
- **`env`**: Sets environment variables for your application, such as `NODE_ENV` and `PORT`.

This configuration tells Vercel how to build and route requests for your application, ensuring that your different API versions are properly handled.

If you have any specific requirements or additional configurations you'd like to include, feel free to let me know!